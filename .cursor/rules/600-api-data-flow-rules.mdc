---
description: Rules for handling API calls, AI streaming, and data persistence in this chatbot project.
globs: 
alwaysApply: false
---
# API & Data Flow Rules

Rules for handling API calls, AI streaming, and data persistence in this chatbot project.

## Context
- When working with Vercel AI SDK streaming responses
- When handling Supabase database operations
- When managing chat session and message state

## Instructions

### AI Streaming Pattern
- Use Vercel AI SDK's `streamText` for AI responses
- Handle streaming in API routes (`app/api/chat/route.ts`)
- Save messages during streaming, not just at completion
- Implement proper error handling for AI provider failures

### Database Operations
- **API-First Pattern**: Use API routes for all CRUD operations, avoid direct client database calls in components
- Use authenticated Supabase client in API routes only
- Follow Row Level Security patterns for user data isolation
- Batch related operations when possible
- Handle real-time subscriptions properly

### Data Flow Architecture
```
User Input → API Route → AI Provider → Stream Response → Save to DB → Update UI
```

### Error Handling
- **See [601-user-feedback-rules.mdc](mdc:.cursor/rules/601-user-feedback-rules.mdc#error-handling) for complete error handling guidelines**
- **API-specific**: Use `apiError`, `authError`, `supabaseError` with route name as component
- **AI-specific**: Use `aiProviderError` for AI failures, `streamingError` for streaming issues
- Handle AI provider failures gracefully with fallbacks
- Return consistent 401/403 errors for auth failures

### State Management Principles
- **Single Source of Truth**: Use one variable for each piece of state (avoid: selectedSessionId, sessionId, sessionIdRef, currentSessionId for same data)
- **Prefer null over magic strings**: Use `null` for "new chat" state
- **Avoid complex state synchronization**: Don't sync state between multiple useState, useRef, and computed values
- **Let parent components own session state**: Child components should receive session ID as props, not manage it internally

### State Management
- Use React state for UI-specific data
- Use Supabase real-time for persistent chat data
- Avoid unnecessary re-renders during streaming
- Keep chat history in sync across sessions

### Session Management
- Auto-create sessions on first message
- Generate session titles from first user message
- Handle session persistence across browser refreshes
- Clean up abandoned sessions appropriately

### Authentication & Authorization Rules
- **RLS-Based Security**: This project uses Row Level Security with authenticated clients (no admin client)
- **Frontend API Calls**: Always include `credentials: 'include'` in fetch requests to send auth cookies
- **Database Operations**: Use `createAuthenticatedSupabaseClient()` in API routes, let RLS handle authorization
- **Data Access Pattern**:
  ```typescript
  // ✅ Correct: API route with authenticated client
  const supabase = await createAuthenticatedSupabaseClient();
  const sessions = await getChatSessions(supabase);
  
  // ❌ Avoid: Direct client calls from components
  const { data } = await supabaseBrowser.from("chat_sessions").select("*");
  ```
- **User ownership**: RLS policies automatically filter data by user, no manual filtering needed
- **Error handling**: Return consistent 401/403 errors for auth failures
