---
description: Rules for providing appropriate user feedback and error handling in this chatbot application.
globs: 
alwaysApply: false
---
# User Feedback & Error Handling Rules

Rules for providing appropriate user feedback and centralized error handling in this chatbot application.

## Context
- When handling loading states during AI responses
- When displaying errors for authentication or AI failures
- When providing feedback for chat operations

## Instructions

### Loading States
- Show typing indicators during AI response streaming
- Use skeleton loaders for chat history loading
- Provide immediate feedback for user message submission
- Handle loading states gracefully during network issues

### Error Handling

<critical>
**NEVER use `console.error`** - Always use centralized `ErrorHandlers` from `@/lib/error-handling` for all errors
</critical>

#### Core Principles
- Always provide context: `{ component: "ComponentName", action: "actionName" }`
- Use specific error types based on the error category
- Include relevant metadata for debugging
- Provide user-friendly error messages
- Handle errors consistently across the entire application

#### Available Error Types
- `authError` - Authentication/authorization failures
- `supabaseError` - Database operations
- `aiProviderError` - AI service failures
- `validationError` - User input validation
- `componentError` - UI component errors
- `apiError` - General API failures
- `networkError` - Network connectivity issues
- `streamingError` - AI streaming interruptions
- `permissionError` - Permission/access control failures
- `unknownError` - Fallback for unexpected errors

#### Standard Patterns

```typescript
// Basic error handling pattern
try {
  await operation();
} catch (error) {
  ErrorHandlers.supabaseError("Operation failed", error, {
    component: "ComponentName",
    action: "operationName",
    metadata: { relevantContext: "value" }
  });
}

// Validation errors with custom user message
ErrorHandlers.validationError(
  "Email validation failed",
  "Please enter a valid email address",
  { component: "AuthForm", action: "validateEmail" }
);

// API route error handling
ErrorHandlers.authError("Authentication failed", error, {
  component: "APIRouteName",
  action: "requireAuth",
  userId: user?.id
});

// Component error handling
ErrorHandlers.componentError("Failed to copy text", error, {
  component: "CopyButton",
  action: "handleCopy"
});

// AI/Streaming error handling
ErrorHandlers.aiProviderError("AI service unavailable", error, {
  component: "ChatHandler",
  action: "streamResponse",
  sessionId: session.id
});
```

#### Context-Specific Guidelines
- **API Routes**: Use `apiError`, `authError`, `supabaseError` with route name as component
- **React Components**: Use `componentError`, `validationError` with component name
- **Context Providers**: Use appropriate error type with context name as component
- **Database Operations**: Always use `supabaseError` with operation details
- **AI Operations**: Use `aiProviderError` or `streamingError` with session context

### Success Feedback
- Avoid success messages for expected chat operations
- Provide subtle confirmation for settings changes
- Show progress for longer operations (file uploads, etc.)
- Use visual cues rather than toast messages when possible

### Chat-Specific Patterns
- Show message delivery status appropriately
- Handle streaming interruptions gracefully
- Provide feedback for unsaved changes
- Display session creation/switching feedback minimally

### Best Practices
- Keep error messages user-friendly and actionable
- Avoid technical jargon in user-facing messages
- Provide retry mechanisms for transient failures
- Use progressive disclosure for detailed error information
